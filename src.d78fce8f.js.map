{"version":3,"sources":["js/refs.js","js/timer.js","index.js"],"names":["daysC","document","querySelector","hoursC","minsC","secondsC","refs","Timer","constructor","targetDate","markup","deltaTime","start","setInterval","currentTime","Date","now","timeComponents","getTimeComponents","insertValues","time","days","pad","Math","floor","hours","mins","seconds","value","String","padStart","innerHTML","timer"],"mappings":";;;AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACbA,MAAOC,SAASC,cAAe,uBAC/BC,OAAQF,SAASC,cAAe,wBAChCE,MAAOH,SAASC,cAAe,uBAC/BG,SAAUJ,SAASC,cAAe,wBAJrB,QAAA,QAAA;;AC8Hf,aA9HA,IAAA,EAAA,EAAA,QAAA,WA8HA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA5HA,MAAM,MAAEF,EAAF,OAASG,EAAT,MAAiBC,EAAjB,SAAwBC,GAAaC,EAA3C,QAEA,MAAMC,EACJC,aAAY,WAAEC,EAAF,OAAcC,IACnBJ,KAAAA,KAAO,CAAEN,MAAAA,EAAOG,OAAAA,EAAQC,MAAAA,EAAOC,SAAAA,GAC/BI,KAAAA,WAAaA,EACbE,KAAAA,UAAY,EACZD,KAAAA,OAASA,EAIfE,QACAC,YAAY,KACJC,MAAAA,EAAcC,KAAKC,MAEnBL,EAAY,KAAKF,WAAaK,EAE7BG,EAAiB,KAAKC,kBAAkBP,GAEvCQ,KAAAA,aAAaF,IACnB,KAGJC,kBAAkBE,GAMR,MAAA,CAAEC,KALE,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QAKzBK,MAJF,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAI7CM,KAHV,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAGjCO,QAFb,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,OAK5DE,IAAIM,GACIC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGlCX,cAAa,KAAEE,EAAF,MAAQI,EAAR,KAAeC,EAAf,QAAqBC,IAC5BrB,KAAAA,KAAKN,MAAM+B,UAAYV,EACvBf,KAAAA,KAAKH,OAAO4B,UAAYN,EACxBnB,KAAAA,KAAKF,MAAM2B,UAAYL,EACvBpB,KAAAA,KAAKD,SAAS0B,UAAYJ,GAInC,MAAMK,EAAQ,IAAIzB,EAAM,CAEtBE,WAAY,IAAIM,KAAM,iBAIxBiB,EAAMpB;;ACnDN,aADA,QAAA,oBACA,QAAA","file":"src.d78fce8f.js","sourceRoot":"..\\src","sourcesContent":["export default {\r\n  daysC: document.querySelector(`[data-value=\"days\"]`),\r\n  hoursC: document.querySelector(`[data-value=\"hours\"]`),\r\n  minsC: document.querySelector(`[data-value=\"mins\"]`),\r\n  secondsC: document.querySelector(`[data-value=\"secs\"]`),\r\n}","import refs from './refs'\r\n\r\nconst { daysC, hoursC, minsC, secondsC } = refs\r\n\r\nclass Timer {\r\n  constructor({ targetDate, markup }) {\r\n    this.refs = { daysC, hoursC, minsC, secondsC }\r\n    this.targetDate = targetDate;\r\n    this.deltaTime = 0;\r\n    this.markup = markup;\r\n    \r\n  }\r\n\r\n   start() {\r\n   setInterval(() => {\r\n     const currentTime = Date.now()\r\n    //  console.log(currentTime);\r\n     const deltaTime = this.targetDate - currentTime\r\n    //  console.log(this.targetDate);\r\n      const timeComponents = this.getTimeComponents(deltaTime)\r\n        // console.log(timeComponents);\r\n        this.insertValues(timeComponents)\r\n    }, 1000);\r\n  }\r\n\r\n   getTimeComponents(time) {\r\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)))\r\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const seconds = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n      return { days,hours, mins, seconds };\r\n  }\r\n\r\n   pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n\r\n   insertValues({ days, hours, mins, seconds }) {\r\n    this.refs.daysC.innerHTML = days;\r\n    this.refs.hoursC.innerHTML = hours;\r\n    this.refs.minsC.innerHTML = mins;\r\n    this.refs.secondsC.innerHTML = seconds;\r\n}\r\n}\r\n\r\nconst timer = new Timer({\r\n\r\n  targetDate: new Date(`jan 1, 2022`),\r\n \r\n});\r\n// Timer.start()\r\ntimer.start()\r\n\r\n\r\n// class Timer {\r\n//   constructor(finishDate, markup) {\r\n//     this.markup = markup\r\n//     this.finishDate = finishDate\r\n//     this.intID = null\r\n//     this.deltaTime = 0\r\n//   }\r\n//   start() {\r\n//     console.log(`Timer started`)\r\n//     this.intID = setInterval(() => {\r\n//       let currentTime = Date.now() // берем текущее время каждую секунду\r\n//       // console.log('currentTime:', currentTime)\r\n//       // console.log('this.finishDate', this.finishDate)\r\n//       this.deltaTime = this.finishDate - currentTime // узнаем разницу времени\r\n//       // console.log('deltaTime:', this.deltaTime)\r\n//       // из разницы времени выбираем:\r\n//       const days = this.pad(Math.floor(this.deltaTime / (1000 * 60 * 60 * 24)))\r\n//       const hours = this.pad(\r\n//         Math.floor((this.deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n//       )\r\n//       const mins = this.pad(\r\n//         Math.floor((this.deltaTime % (1000 * 60 * 60)) / (1000 * 60)),\r\n//       )\r\n//       const seconds = this.pad(\r\n//         Math.floor((this.deltaTime % (1000 * 60)) / 1000),\r\n//       )\r\n//       // console.log('days:', days)\r\n//       // console.log('hours:', hours)\r\n//       // console.log('mins:', mins)\r\n//       // console.log('seconds:', seconds)\r\n//       this.insertValues(days, hours, mins, seconds)\r\n//     }, 1000)\r\n//   }\r\n// //   stop() {\r\n// //     console.log('intID:', this.intID)\r\n// //     clearInterval(this.intID)\r\n// //     this.clearMarkup()\r\n// //   }\r\n//   // ===========\r\n//   pad(value) {\r\n//     return String(value).padStart(2, '0')\r\n//   }\r\n//   insertValues(d, h, m, s) {\r\n//     const { daysC, hoursC, minsC, secondsC } = this.markup\r\n//     daysC.textContent = d\r\n//     hoursC.textContent = h\r\n//     minsC.textContent = m\r\n//     secondsC.textContent = s\r\n//   }\r\n// //   clearMarkup() {\r\n// //     const { daysC, hoursC, minsC, secondsC } = this.markup\r\n// //     daysC.textContent = '00'\r\n// //     hoursC.textContent = '00'\r\n// //     minsC.textContent = '00'\r\n// //     secondsC.textContent = '00'\r\n// //   }\r\n//   // ===========\r\n// }\r\n\r\n// // const myTimer = new Timer(new Date(2022, 0, 1))\r\n// const myTimer = new Timer(new Date(`jan 1, 2022`), {\r\n//   daysC,\r\n//   hoursC,\r\n//   minsC,\r\n//   secondsC,\r\n// })\r\n// console.log(myTimer)\r\n//  myTimer.start()\r\n// // new CountdownTimer({\r\n// //   selector: '#timer-1',\r\n// //   targetDate: new Date(`jan 1, 2022`),\r\n// // });","import './sass/main.scss';\r\nimport './js/timer.js'\r\n\r\n"]}